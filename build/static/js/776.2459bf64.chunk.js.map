{"version":3,"file":"static/js/776.2459bf64.chunk.js","mappings":"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","sources":["pages/productIntroduction/index.js"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { FormControl, InputLabel, MenuItem, Select } from \"@mui/material\";\nimport { DataGrid } from \"@mui/x-data-grid\";\nimport excelIcon from \"assets/images/excel-icon.png\";\nimport Translation from \"components/translation\";\nimport {\n  HOSTS,\n  PAGES_DATA,\n  PAGES_GET_DATA_FUNCTIONS,\n  PAGES_MODALS,\n  PAGE_DELETE_ROW_ITEM,\n  PAGE_EXPORT_TABLE_DATA,\n  TABLE_ROW_ACTION_BARS,\n} from \"helpers/constants\";\nimport { useEffect, useState } from \"react\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport { translationIdSelector } from \"store/selectors/app\";\n\nexport default function ProductIntroduction({ pageId }) {\n  const CurrentPageRowActionBar = TABLE_ROW_ACTION_BARS[pageId];\n  const tableRowActionBar = {\n    flex: 1,\n    field: \"actions\",\n    headerName: \"\",\n    renderCell: (params) => (\n      <CurrentPageRowActionBar\n        {...params}\n        handleEdit={handleAddNewProduct}\n        getData={getData}\n        deleteProduct={PAGE_DELETE_ROW_ITEM[pageId]}\n      />\n    ),\n  };\n  const {\n    withNewButton,\n    buttonLabel,\n    tableColumns,\n    withExport,\n    withModal,\n    pageTitle,\n  } = PAGES_DATA[pageId];\n  const [rows, setRows] = useState([]);\n  const [addNewProductModal, setAddNewProductModal] = useState({\n    open: false,\n    updatableData: null,\n  });\n  const [search, setSearch] = useState({ field: \"\", input: \"\" });\n  const [tablePaginationSettings, setTablePaginationSettings] = useState({\n    rowsPerPageOptions: [10, 25, 50],\n    pageSize: 10,\n  });\n  const translationId = useSelector(translationIdSelector, shallowEqual);\n\n  const getData = async () => {\n    PAGES_GET_DATA_FUNCTIONS[pageId]().then((res) =>\n      !res?.hasError\n        ? setRows(res.data?.map((elem, index) => ({ ...elem, id: index + 1 })))\n        : setRows([])\n    );\n  };\n\n  useEffect(() => {\n    pageId && getData();\n  }, [pageId]);\n\n  const handlePageSizeChange = (e) =>\n    setTablePaginationSettings({\n      ...tablePaginationSettings,\n      pageSize: e.target.value,\n    });\n\n  const handleSearch = (e) => setSearch({ ...search, input: e.target.value });\n\n  const handleAddNewProduct =\n    (updatableData = null) =>\n    () => {\n      setAddNewProductModal({ open: true, updatableData });\n    };\n  const closeAddNewProductModal = () =>\n    setAddNewProductModal({ open: false, updatableData: null });\n\n  const handleExport = async () => {\n    await PAGE_EXPORT_TABLE_DATA[pageId]();\n    window.open(`${HOSTS.BASE_URL}/files/products.csv`, \"_blank\");\n  };\n\n  const getTableColumns = () => {\n    const columns = CurrentPageRowActionBar\n      ? [...tableColumns[translationId], tableRowActionBar]\n      : tableColumns[translationId];\n    return columns;\n  };\n\n  const handleSelectSearchField = (e) =>\n    setSearch({ ...search, field: e.target.value });\n\n  const CurrentModal = PAGES_MODALS[pageId];\n  return (\n    <>\n      {withModal && addNewProductModal.open && (\n        <CurrentModal\n          {...addNewProductModal}\n          handleClose={closeAddNewProductModal}\n          getData={getData}\n        />\n      )}\n      <div className=\"page-wrapper\">\n        <div className=\"ProductIntroduction-header-wrapper\">\n          <div className=\"circle-white\"></div>\n          <p>\n            <Translation label={pageTitle} />\n          </p>\n        </div>\n        <div className=\"table-header-actions-wrapper\">\n          <div>\n            {withNewButton && (\n              <button\n                onClick={handleAddNewProduct()}\n                variant=\"outlined\"\n                className=\"create-new-product-btn\"\n              >\n                <Translation label={buttonLabel} />\n              </button>\n            )}\n            {/* <a href=\"http://localhost:9164/files/products.csv\" target=\"blank\">\n              Download\n            </a> */}\n            <div className=\"table-page-size-dropdown-wrapper\">\n              <div className=\"table-page-size-dropdown-wrapper-inner\">\n                <FormControl fullWidth>\n                  <Select\n                    className=\"table-page-size-dropdown\"\n                    value={tablePaginationSettings.pageSize}\n                    onChange={handlePageSizeChange}\n                  >\n                    {tablePaginationSettings.rowsPerPageOptions.map((elem) => (\n                      <MenuItem value={elem}>{elem}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </div>\n              <p>\n                <Translation label=\"_note\" />\n              </p>\n            </div>\n          </div>\n          <div>\n            <div className=\"search-wrapper\">\n              <FormControl>\n                <InputLabel>\n                  <Translation label=\"_search\" />\n                </InputLabel>\n                <Select\n                  className=\"search-field-wrapper\"\n                  value={search.field}\n                  onChange={handleSelectSearchField}\n                  placeholder={Translation({ label: \"_search\" })}\n                >\n                  {getTableColumns()?.map((elem) => (\n                    <MenuItem value={elem.field}>{elem.headerName}</MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n              <input\n                placeholder={Translation({ label: \"_search\" })}\n                type=\"search\"\n                value={search.input}\n                onChange={handleSearch}\n                className=\"search-input\"\n              />\n            </div>\n            {withExport && (\n              <button onClick={handleExport} className=\"download-btn\">\n                <Translation label=\"_export\" />\n                <img className=\"excel-icon\" src={excelIcon} alt=\"excelIcon\" />\n              </button>\n            )}\n          </div>\n        </div>\n        <div className=\"table-wrapper\">\n          <DataGrid\n            columns={getTableColumns()}\n            rows={\n              search.field && search.input\n                ? rows.filter((elem) =>\n                    `${elem[search.field]}`\n                      ?.toUpperCase()\n                      .includes(`${search.input}`.toUpperCase())\n                  )\n                : rows\n            }\n          />\n        </div>\n      </div>\n    </>\n  );\n}\n"],"names":["ProductIntroduction","pageId","CurrentPageRowActionBar","TABLE_ROW_ACTION_BARS","tableRowActionBar","flex","field","headerName","renderCell","params","handleEdit","handleAddNewProduct","getData","deleteProduct","PAGE_DELETE_ROW_ITEM","PAGES_DATA","withNewButton","buttonLabel","tableColumns","withExport","withModal","pageTitle","useState","rows","setRows","open","updatableData","addNewProductModal","setAddNewProductModal","input","search","setSearch","rowsPerPageOptions","pageSize","tablePaginationSettings","setTablePaginationSettings","translationId","useSelector","translationIdSelector","shallowEqual","PAGES_GET_DATA_FUNCTIONS","then","res","hasError","data","map","elem","index","id","useEffect","handleExport","PAGE_EXPORT_TABLE_DATA","window","HOSTS","getTableColumns","CurrentModal","PAGES_MODALS","handleClose","className","label","onClick","variant","FormControl","fullWidth","Select","value","onChange","e","target","MenuItem","InputLabel","placeholder","Translation","type","src","excelIcon","alt","DataGrid","columns","filter","toUpperCase","includes"],"sourceRoot":""}